image: bverhagen/pacman-aur-wrapper
variables:
      GIT_SUBMODULE_STRATEGY: normal

stages:
    - prepare
    - build
    - verify
    - upload

.enable_sudo_nobody: &enable_sudo_nobody
        echo "nobody ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers                  # Enable sudo to work without prompting a password

.install_gitchangelog: &install_gitchangelog
        sudo pacman -Sy --noconfirm --needed python curl && sudo sh -c 'curl -sSL https://raw.githubusercontent.com/vaab/gitchangelog/master/src/gitchangelog/gitchangelog.py > /usr/local/bin/gitchangelog' && sudo chmod +x /usr/local/bin/gitchangelog

## This activates the use of the configured private keys in a build pipeline.
.enable_private_keys: &enable_private_keys
    ## Install ssh-agent if not already installed
    - 'which ssh-agent || sudo pacman -Sy --noconfirm --needed openssh'
  
    ## Run ssh-agent
    - eval $(ssh-agent -s)
  
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work without extra base64 encoding. (https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556)
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  
    ## Set the user name and and email for git commands
    - git config --global user.email "unknown@unknown.com"
    - git config --global user.name "Gitlab CI Runner"
  
    ## Set known hosts using the configurable SSH_KNOWN_HOSTS variable
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

.pkgbuild:prepare: &pkgbuild_prepare
    stage: prepare
    variables:
        MAKE_TARGETS: prepare
    script:
        - sudo pacman -Sy --noconfirm --needed make sed sudo git base-devel lsb-release
        - *install_gitchangelog
        - echo Making targets= ${MAKE_TARGETS}
        - make ${MAKE_TARGETS}
    artifacts:
        expire_in: 1 day
        paths:
            - pkgbuild/build_package/*

.pkgbuild:build: &pkgbuild_build
    stage: build
    variables:
        BUILD_DIR: pkgbuild/build_package
    script: 
        - sudo pacman -Sy --noconfirm --needed base-devel sudo lsb-release
        - cd $BUILD_DIR
        - makepkg --noconfirm --check --needed --syncdeps --force
    artifacts:
        expire_in: 1 day
        paths:
            - $BUILD_DIR/PKGBUILD
            - $BUILD_DIR/*.tar.xz

.pkgbuild:analyze: &pkgbuild_analyze
    stage: verify
    variables:
        BUILD_DIR: pkgbuild/build_package
        PACKAGE_DIR: package
    script:
        - sudo pacman -Sy --noconfirm --needed namcap make lsb-release
        - make PREFIX=$(pwd)/${PACKAGE_DIR} install
        - namcap ${PACKAGE_DIR}/PKGBUILD
        - namcap ${PACKAGE_DIR}/.SRCINFO
        - namcap ${BUILD_DIR}/*.tar.xz

.pkgbuild:verify: &pkgbuild_verify
    stage: verify
    variables:
        BUILD_DIR: pkgbuild/build_package
        TEST_BUILD_DIR: pkgbuild/build_test
    script:
        - sudo pacman -Sy
        - sudo pacman --needed --noconfirm -U $BUILD_DIR/*.tar.xz

.pkgbuild:upload: &pkgbuild_upload
    stage: upload
    variables:
        URL: INVALID_URL.git
    before_script:
        *enable_private_keys
    script:
        - echo "Cloning ${URL}..."
        - git clone ${URL} repo
        - rm -rf repo/*
        - sudo pacman -Sy --noconfirm --needed make sed lsb-release sudo git lsb-release
        - make PREFIX=$(pwd)/repo install
        - export SOURCE_HASH=$(git log -n 1 --pretty=format:"%H")
        - git -C repo add .
        - git -C repo diff-index --quiet HEAD -- && echo 'No changes -- skipping commit' || git -C repo commit -m "Updated package to exec-helper commit ${SOURCE_HASH}"
        - git -C repo push

pkgbuild:prepare:
    <<: *pkgbuild_prepare
    image: bverhagen/pacman-aur-wrapper
    variables:
        MAKE_TARGETS: pkgbuild TARGET=prepare

pkgbuild:build:
    <<: *pkgbuild_build
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - pkgbuild:prepare

pkgbuild:analyze:
    <<: *pkgbuild_analyze
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - pkgbuild:prepare
        - pkgbuild:build

pkgbuild:verify:
    <<: *pkgbuild_verify
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - pkgbuild:build
        - pkgbuild:build-test

upload:
    <<: *pkgbuild_upload
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - arch-linux:prepare
    variables:
        URL: ssh://aur@aur.archlinux.org/rapidcheck.git
    only:
        - master
